name: CI Failure Reporter

on:
  workflow_run:
    workflows: [".NET Build & Test"]
    types: [completed]
  workflow_dispatch:
    inputs:
      run_id:
        description: Optional Actions run ID to analyze (defaults to latest failed)
        required: false

permissions:
  contents: read
  actions: read
  issues: write

jobs:
  report:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Create or update CI failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            async function getTargetRun() {
              const inputRunId = core.getInput('run_id');
              if (inputRunId) {
                const runId = Number(inputRunId);
                const { data } = await github.rest.actions.getWorkflowRun({ owner, repo, run_id: runId });
                return data;
              }
              if (context.eventName === 'workflow_run' && context.payload.workflow_run) {
                return context.payload.workflow_run;
              }
              const { data } = await github.rest.actions.listWorkflowRuns({
                owner,
                repo,
                workflow_id: '.github/workflows/dotnet.yml',
                status: 'failure',
                per_page: 1
              });
              if (!data.workflow_runs?.length) {
                core.setFailed('No failed workflow runs found for .github/workflows/dotnet.yml');
                return null;
              }
              return data.workflow_runs[0];
            }

            const run = await getTargetRun();
            if (!run) return;

            const jobsResp = await github.rest.actions.listJobsForWorkflowRun({ owner, repo, run_id: run.id, per_page: 100 });
            const jobs = jobsResp.data.jobs || [];
            const failingJobs = jobs.filter(j => j.conclusion !== 'success');

            function mdList(arr) {
              return arr.map(s => `- ${s}`).join('\n');
            }

            const failingDetails = failingJobs.map(job => {
              const stepFails = (job.steps || []).filter(s => s.conclusion && s.conclusion !== 'success');
              const stepLines = stepFails.map(s => `Step: ${s.name} — ${s.conclusion}`);
              return `Job: ${job.name} — ${job.conclusion}\n${mdList(stepLines)}`;
            });

            const title = `CI failure: .NET Build & Test (#${run.id}) on ${run.head_branch} @ ${run.head_sha?.slice(0,7)}`;
            const runUrl = run.html_url || `https://github.com/${owner}/${repo}/actions/runs/${run.id}`;
            const artifactsUrl = `${runUrl}`;

            const body = [
              `CI run: ${runUrl}`,
              `Branch: ${run.head_branch}`,
              `SHA: ${run.head_sha}`,
              `Status: ${run.status} / ${run.conclusion}`,
              '',
              'Failing jobs/steps:',
              failingDetails.length ? failingDetails.map(x => `- ${x}`).join('\n') : '- (No failing jobs reported; check run logs)',
              '',
              'Artifacts and logs:',
              `- See run page for logs and artifacts: ${artifactsUrl}`,
              '',
              'Next steps:',
              '- Download TRX artifacts for failing projects (if present)',
              '- Reproduce locally using Release config',
              '- Identify root cause and propose a fix'
            ].join('\n');

            const search = await github.rest.search.issuesAndPullRequests({
              q: `repo:${owner}/${repo} is:issue state:open in:title "CI failure: .NET Build & Test (#${run.id})"`
            });

            if (search.data.items && search.data.items.length) {
              const issue = search.data.items[0];
              core.info(`Existing issue found (#${issue.number}); adding a comment update.`);
              await github.rest.issues.createComment({ owner, repo, issue_number: issue.number, body: body });
              core.setOutput('issue_number', issue.number);
            } else {
              const created = await github.rest.issues.create({
                owner,
                repo,
                title,
                body,
                labels: ['ci-failure']
              });
              core.info(`Created issue #${created.data.number}`);
              core.setOutput('issue_number', created.data.number);
            }
