using FluentAssertions;
using Microsoft.Extensions.Logging;
using Moq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using HVO;
using HVO.WebSite.RoofControllerV4.Logic;

namespace HVO.WebSite.RoofControllerV4.Tests.Logic;

/// <summary>
/// Tests for IRoofController interface implementations.
/// Since RoofController has complex GPIO dependencies, we focus on testing
/// the MockRoofController which implements the same interface contract.
/// </summary>
[TestClass]public class RoofControllerTests : IDisposable
{
    private readonly Mock<ILogger<MockRoofController>> _mockLogger;
    private MockRoofController? _roofController;

    public RoofControllerTests()
    {
        _mockLogger = new Mock<ILogger<MockRoofController>>();
    }

    public void Dispose()
    {
        _roofController = null;
        GC.SuppressFinalize(this);
    }

    #region Constructor Tests

    [TestMethod]
    public void Constructor_WithValidLogger_CreatesInstance()
    {
        // Act
        _roofController = new MockRoofController(_mockLogger.Object);

        // Assert
        _roofController.Should().NotBeNull();
        _roofController.Status.Should().Be(RoofControllerStatus.Stopped);
        _roofController.IsInitialized.Should().BeFalse();
    }

    [TestMethod]
    public void Constructor_WithNullLogger_ThrowsArgumentNullException()
    {
        // Act & Assert
        var act = () => new MockRoofController(null!);
        act.Should().Throw<ArgumentNullException>();
    }

    #endregion

    #region Initialization Tests

    [TestMethod]
    public async Task Initialize_WhenNotInitialized_ReturnsSuccessAndSetsInitialized()
    {
        // Arrange
        _roofController = new MockRoofController(_mockLogger.Object);

        // Act
        var result = await _roofController.Initialize(CancellationToken.None);

        // Assert
        result.Should().NotBeNull();
        result.IsSuccess.Should().BeTrue();
        result.Value.Should().BeTrue();
        _roofController.IsInitialized.Should().BeTrue();
    }

    [TestMethod]
    public async Task Initialize_LogsInitializationMessage()
    {
        // Arrange
        _roofController = new MockRoofController(_mockLogger.Object);

        // Act
        await _roofController.Initialize(CancellationToken.None);

        // Assert
        _mockLogger.Verify(
            x => x.Log(
                LogLevel.Information,
                It.IsAny<EventId>(),
                It.Is<It.IsAnyType>((v, t) => v.ToString()!.Contains("Initialize called")),
                It.IsAny<Exception>(),
                It.IsAny<Func<It.IsAnyType, Exception?, string>>()),
            Times.Once);
    }

    #endregion

    #region Stop Operation Tests

    [TestMethod]
    public void Stop_ReturnsSuccessWithStoppedStatus()
    {
        // Arrange
        _roofController = new MockRoofController(_mockLogger.Object);

        // Act
        var result = _roofController.Stop();

        // Assert
        result.Should().NotBeNull();
        result.IsSuccess.Should().BeTrue();
        result.Value.Should().Be(RoofControllerStatus.Stopped);
        _roofController.Status.Should().Be(RoofControllerStatus.Stopped);
    }

    [TestMethod]
    public void Stop_LogsStopMessage()
    {
        // Arrange
        _roofController = new MockRoofController(_mockLogger.Object);

        // Act
        _roofController.Stop();

        // Assert
        _mockLogger.Verify(
            x => x.Log(
                LogLevel.Information,
                It.IsAny<EventId>(),
                It.Is<It.IsAnyType>((v, t) => v.ToString()!.Contains("Stop called")),
                It.IsAny<Exception>(),
                It.IsAny<Func<It.IsAnyType, Exception?, string>>()),
            Times.Once);
    }

    #endregion

    #region Open Operation Tests

    [TestMethod]
    public void Open_ReturnsSuccessWithOpeningStatus()
    {
        // Arrange
        _roofController = new MockRoofController(_mockLogger.Object);

        // Act
        var result = _roofController.Open();

        // Assert
        result.Should().NotBeNull();
        result.IsSuccess.Should().BeTrue();
        result.Value.Should().Be(RoofControllerStatus.Opening);
        _roofController.Status.Should().Be(RoofControllerStatus.Opening);
    }

    [TestMethod]
    public void Open_LogsOpenMessage()
    {
        // Arrange
        _roofController = new MockRoofController(_mockLogger.Object);

        // Act
        _roofController.Open();

        // Assert
        _mockLogger.Verify(
            x => x.Log(
                LogLevel.Information,
                It.IsAny<EventId>(),
                It.Is<It.IsAnyType>((v, t) => v.ToString()!.Contains("Open called")),
                It.IsAny<Exception>(),
                It.IsAny<Func<It.IsAnyType, Exception?, string>>()),
            Times.Once);
    }

    #endregion

    #region Close Operation Tests

    [TestMethod]
    public void Close_ReturnsSuccessWithClosingStatus()
    {
        // Arrange
        _roofController = new MockRoofController(_mockLogger.Object);

        // Act
        var result = _roofController.Close();

        // Assert
        result.Should().NotBeNull();
        result.IsSuccess.Should().BeTrue();
        result.Value.Should().Be(RoofControllerStatus.Closing);
        _roofController.Status.Should().Be(RoofControllerStatus.Closing);
    }

    [TestMethod]
    public void Close_LogsCloseMessage()
    {
        // Arrange
        _roofController = new MockRoofController(_mockLogger.Object);

        // Act
        _roofController.Close();

        // Assert
        _mockLogger.Verify(
            x => x.Log(
                LogLevel.Information,
                It.IsAny<EventId>(),
                It.Is<It.IsAnyType>((v, t) => v.ToString()!.Contains("Close called")),
                It.IsAny<Exception>(),
                It.IsAny<Func<It.IsAnyType, Exception?, string>>()),
            Times.Once);
    }

    #endregion

    #region State Management Tests

    [TestMethod]
    [DataRow(RoofControllerStatus.Unknown)]
    [DataRow(RoofControllerStatus.NotInitialized)]
    [DataRow(RoofControllerStatus.Closed)]
    [DataRow(RoofControllerStatus.Closing)]
    [DataRow(RoofControllerStatus.Open)]
    [DataRow(RoofControllerStatus.Opening)]
    [DataRow(RoofControllerStatus.Stopped)]
    [DataRow(RoofControllerStatus.Error)]
    public void StatusProperty_ReflectsCurrentState(RoofControllerStatus expectedStatus)
    {
        // Arrange
        _roofController = new MockRoofController(_mockLogger.Object);

        // Act & Assert based on the expected status
        switch (expectedStatus)
        {
            case RoofControllerStatus.Stopped:
                _roofController.Stop();
                _roofController.Status.Should().Be(RoofControllerStatus.Stopped);
                break;
            case RoofControllerStatus.Opening:
                _roofController.Open();
                _roofController.Status.Should().Be(RoofControllerStatus.Opening);
                break;
            case RoofControllerStatus.Closing:
                _roofController.Close();
                _roofController.Status.Should().Be(RoofControllerStatus.Closing);
                break;
            default:
                // For other statuses, we can't directly set them in MockRoofController
                // but we can verify the status property works correctly
                _roofController.Status.Should().BeOfType<RoofControllerStatus>();
                break;
        }
    }

    #endregion

    #region Interface Compliance Tests

    [TestMethod]
    public void MockRoofController_ImplementsIRoofControllerInterface()
    {
        // Arrange & Act
        _roofController = new MockRoofController(_mockLogger.Object);

        // Assert
        _roofController.Should().BeAssignableTo<IRoofController>();
    }

    [TestMethod]
    public void IRoofControllerInterface_HasAllRequiredMembers()
    {
        // Arrange
        var interfaceType = typeof(IRoofController);

        // Act & Assert
        interfaceType.GetProperty("IsInitialized").Should().NotBeNull();
        interfaceType.GetProperty("Status").Should().NotBeNull();
        interfaceType.GetMethod("Initialize").Should().NotBeNull();
        interfaceType.GetMethod("Stop").Should().NotBeNull();
        interfaceType.GetMethod("Open").Should().NotBeNull();
        interfaceType.GetMethod("Close").Should().NotBeNull();
    }

    #endregion

    #region Sequential Operations Tests

    [TestMethod]
    public async Task SequentialOperations_WorkCorrectly()
    {
        // Arrange
        _roofController = new MockRoofController(_mockLogger.Object);

        // Act & Assert - Test initialization
        var initResult = await _roofController.Initialize(CancellationToken.None);
        initResult.IsSuccess.Should().BeTrue();
        _roofController.IsInitialized.Should().BeTrue();

        // Act & Assert - Test open operation
        var openResult = _roofController.Open();
        openResult.IsSuccess.Should().BeTrue();
        openResult.Value.Should().Be(RoofControllerStatus.Opening);

        // Act & Assert - Test stop operation
        var stopResult = _roofController.Stop();
        stopResult.IsSuccess.Should().BeTrue();
        stopResult.Value.Should().Be(RoofControllerStatus.Stopped);

        // Act & Assert - Test close operation
        var closeResult = _roofController.Close();
        closeResult.IsSuccess.Should().BeTrue();
        closeResult.Value.Should().Be(RoofControllerStatus.Closing);
    }

    #endregion

    #region Logging Verification Tests

    [TestMethod]
    public void AllOperations_LogAppropriateMessages()
    {
        // Arrange
        _roofController = new MockRoofController(_mockLogger.Object);

        // Act
        _roofController.Stop();
        _roofController.Open();
        _roofController.Close();

        // Assert
        _mockLogger.Verify(
            x => x.Log(
                LogLevel.Information,
                It.IsAny<EventId>(),
                It.Is<It.IsAnyType>((v, t) => v.ToString()!.Contains("Stop called")),
                It.IsAny<Exception>(),
                It.IsAny<Func<It.IsAnyType, Exception?, string>>()),
            Times.Once);

        _mockLogger.Verify(
            x => x.Log(
                LogLevel.Information,
                It.IsAny<EventId>(),
                It.Is<It.IsAnyType>((v, t) => v.ToString()!.Contains("Open called")),
                It.IsAny<Exception>(),
                It.IsAny<Func<It.IsAnyType, Exception?, string>>()),
            Times.Once);

        _mockLogger.Verify(
            x => x.Log(
                LogLevel.Information,
                It.IsAny<EventId>(),
                It.Is<It.IsAnyType>((v, t) => v.ToString()!.Contains("Close called")),
                It.IsAny<Exception>(),
                It.IsAny<Func<It.IsAnyType, Exception?, string>>()),
            Times.Once);
    }

    #endregion

    #region Constructor Tests

    [TestMethod]
    public void Constructor_WithValidParameters_CreatesInstance()
    {
        // Act
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);

        // Assert
        _roofController.Should().NotBeNull();
        _roofController.IsInitialized.Should().BeFalse();
        _roofController.Status.Should().Be(RoofControllerStatus.NotInitialized);
    }

    [TestMethod]
    public void Constructor_WithNullLogger_ThrowsArgumentNullException()
    {
        // Act & Assert
        var action = () => new RoofController(null!, _options, _mockGpioController.Object);
        action.Should().Throw<ArgumentNullException>().WithParameterName("logger");
    }

    [TestMethod]
    public void Constructor_WithNullOptions_ThrowsArgumentNullException()
    {
        // Act & Assert
        var action = () => new RoofController(_mockLogger.Object, null!, _mockGpioController.Object);
        action.Should().Throw<ArgumentNullException>().WithParameterName("roofControllerOptions");
    }

    [TestMethod]
    public void Constructor_WithNullGpioController_ThrowsArgumentNullException()
    {
        // Act & Assert
        var action = () => new RoofController(_mockLogger.Object, _options, null!);
        action.Should().Throw<ArgumentNullException>().WithParameterName("gpioController");
    }

    [TestMethod]
    public void Constructor_WithNullOptionsValue_ThrowsArgumentNullException()
    {
        // Arrange
        var nullOptions = Options.Create<RoofControllerOptions>(null!);

        // Act & Assert
        var action = () => new RoofController(_mockLogger.Object, nullOptions, _mockGpioController.Object);
        action.Should().Throw<ArgumentNullException>();
    }

    #endregion

    #region Initialize Tests

    [TestMethod]
    public async Task Initialize_WhenNotDisposed_InitializesSuccessfully()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);

        // Act
        var result = await _roofController.Initialize(CancellationToken.None);

        // Assert
        result.Should().NotBeNull();
        result.IsSuccessful.Should().BeTrue();
        result.Value.Should().BeTrue();
        _roofController.IsInitialized.Should().BeTrue();
        _roofController.Status.Should().Be(RoofControllerStatus.Stopped);
    }

    [TestMethod]
    public async Task Initialize_WhenAlreadyInitialized_ReturnsSuccess()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        // Act
        var result = await _roofController.Initialize(CancellationToken.None);

        // Assert
        result.IsSuccessful.Should().BeTrue();
        result.Value.Should().BeTrue();
        _roofController.IsInitialized.Should().BeTrue();
    }

    [TestMethod]
    public async Task Initialize_WhenDisposed_ReturnsFailureWithObjectDisposedException()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.DisposeAsync();

        // Act
        var result = await _roofController.Initialize(CancellationToken.None);

        // Assert
        result.IsSuccessful.Should().BeFalse();
        result.Error.Should().BeOfType<ObjectDisposedException>();
    }

    [TestMethod]
    public async Task Initialize_WhenGpioFailure_ReturnsFailure()
    {
        // Arrange
        _mockGpioController.Setup(x => x.OpenPin(It.IsAny<int>(), It.IsAny<PinMode>(), It.IsAny<PinValue>()))
            .Throws(new InvalidOperationException("GPIO error"));
        
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);

        // Act
        var result = await _roofController.Initialize(CancellationToken.None);

        // Assert
        result.IsSuccessful.Should().BeFalse();
        result.Error.Should().BeOfType<InvalidOperationException>();
        _roofController.IsInitialized.Should().BeFalse();
    }

    #endregion

    #region Stop Tests

    [TestMethod]
    public async Task Stop_WhenInitialized_ReturnsStoppedStatus()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        // Act
        var result = _roofController.Stop();

        // Assert
        result.IsSuccessful.Should().BeTrue();
        result.Value.Should().Be(RoofControllerStatus.Stopped);
        _roofController.Status.Should().Be(RoofControllerStatus.Stopped);
    }

    [TestMethod]
    public void Stop_WhenNotInitialized_ReturnsFailureWithInvalidOperationException()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);

        // Act
        var result = _roofController.Stop();

        // Assert
        result.IsSuccessful.Should().BeFalse();
        result.Error.Should().BeOfType<InvalidOperationException>();
        result.Error!.Message.Should().Be("Device not initialized");
    }

    [TestMethod]
    public async Task Stop_WhenDisposed_ReturnsFailureWithObjectDisposedException()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);
        await _roofController.DisposeAsync();

        // Act
        var result = _roofController.Stop();

        // Assert
        result.IsSuccessful.Should().BeFalse();
        result.Error.Should().BeOfType<ObjectDisposedException>();
    }

    [TestMethod]
    public async Task Stop_SetsCorrectGpioPinStates()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        // Act
        var result = _roofController.Stop();

        // Assert
        result.IsSuccessful.Should().BeTrue();
        
        // Verify stop relay is turned ON
        _mockGpioController.Verify(x => x.Write(_roofControllerOptions.StopRoofRelayPin, PinValue.High), Times.AtLeastOnce);
        
        // Verify open and close relays are turned OFF
        _mockGpioController.Verify(x => x.Write(_roofControllerOptions.OpenRoofRelayPin, PinValue.Low), Times.AtLeastOnce);
        _mockGpioController.Verify(x => x.Write(_roofControllerOptions.CloseRoofRelayPin, PinValue.Low), Times.AtLeastOnce);
        
        // Verify keypad is enabled
        _mockGpioController.Verify(x => x.Write(_roofControllerOptions.KeypadEnableRelayPin, PinValue.High), Times.AtLeastOnce);
    }

    #endregion

    #region Open Tests

    [TestMethod]
    public async Task Open_WhenInitializedAndNotOpen_StartsOpeningSequence()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        // Act
        var result = _roofController.Open();

        // Assert
        result.IsSuccessful.Should().BeTrue();
        result.Value.Should().Be(RoofControllerStatus.Opening);
        _roofController.Status.Should().Be(RoofControllerStatus.Opening);
    }

    [TestMethod]
    public void Open_WhenNotInitialized_ReturnsFailureWithInvalidOperationException()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);

        // Act
        var result = _roofController.Open();

        // Assert
        result.IsSuccessful.Should().BeFalse();
        result.Error.Should().BeOfType<InvalidOperationException>();
        result.Error!.Message.Should().Be("Device not initialized");
    }

    [TestMethod]
    public async Task Open_WhenDisposed_ReturnsFailureWithObjectDisposedException()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);
        await _roofController.DisposeAsync();

        // Act
        var result = _roofController.Open();

        // Assert
        result.IsSuccessful.Should().BeFalse();
        result.Error.Should().BeOfType<ObjectDisposedException>();
    }

    [TestMethod]
    public async Task Open_SetsCorrectGpioPinStates()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        // Act
        var result = _roofController.Open();

        // Assert
        result.IsSuccessful.Should().BeTrue();
        
        // Verify open relay is turned ON
        _mockGpioController.Verify(x => x.Write(_roofControllerOptions.OpenRoofRelayPin, PinValue.High), Times.AtLeastOnce);
        
        // Verify stop and close relays are turned OFF
        _mockGpioController.Verify(x => x.Write(_roofControllerOptions.StopRoofRelayPin, PinValue.Low), Times.AtLeastOnce);
        _mockGpioController.Verify(x => x.Write(_roofControllerOptions.CloseRoofRelayPin, PinValue.Low), Times.AtLeastOnce);
        
        // Verify keypad is disabled during operation
        _mockGpioController.Verify(x => x.Write(_roofControllerOptions.KeypadEnableRelayPin, PinValue.Low), Times.AtLeastOnce);
    }

    [TestMethod]
    public async Task Open_WhenGpioException_ReturnsFailure()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        _mockGpioController.Setup(x => x.Write(It.IsAny<int>(), It.IsAny<PinValue>()))
            .Throws(new InvalidOperationException("GPIO write error"));

        // Act
        var result = _roofController.Open();

        // Assert
        result.IsSuccessful.Should().BeFalse();
        result.Error.Should().BeOfType<InvalidOperationException>();
    }

    #endregion

    #region Close Tests

    [TestMethod]
    public async Task Close_WhenInitializedAndNotClosed_StartsClosingSequence()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        // Act
        var result = _roofController.Close();

        // Assert
        result.IsSuccessful.Should().BeTrue();
        result.Value.Should().Be(RoofControllerStatus.Closing);
        _roofController.Status.Should().Be(RoofControllerStatus.Closing);
    }

    [TestMethod]
    public void Close_WhenNotInitialized_ReturnsFailureWithInvalidOperationException()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);

        // Act
        var result = _roofController.Close();

        // Assert
        result.IsSuccessful.Should().BeFalse();
        result.Error.Should().BeOfType<InvalidOperationException>();
        result.Error!.Message.Should().Be("Device not initialized");
    }

    [TestMethod]
    public async Task Close_WhenDisposed_ReturnsFailureWithObjectDisposedException()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);
        await _roofController.DisposeAsync();

        // Act
        var result = _roofController.Close();

        // Assert
        result.IsSuccessful.Should().BeFalse();
        result.Error.Should().BeOfType<ObjectDisposedException>();
    }

    [TestMethod]
    public async Task Close_SetsCorrectGpioPinStates()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        // Act
        var result = _roofController.Close();

        // Assert
        result.IsSuccessful.Should().BeTrue();
        
        // Verify close relay is turned ON
        _mockGpioController.Verify(x => x.Write(_roofControllerOptions.CloseRoofRelayPin, PinValue.High), Times.AtLeastOnce);
        
        // Verify stop and open relays are turned OFF
        _mockGpioController.Verify(x => x.Write(_roofControllerOptions.StopRoofRelayPin, PinValue.Low), Times.AtLeastOnce);
        _mockGpioController.Verify(x => x.Write(_roofControllerOptions.OpenRoofRelayPin, PinValue.Low), Times.AtLeastOnce);
        
        // Verify keypad is disabled during operation
        _mockGpioController.Verify(x => x.Write(_roofControllerOptions.KeypadEnableRelayPin, PinValue.Low), Times.AtLeastOnce);
    }

    [TestMethod]
    public async Task Close_WhenGpioException_ReturnsFailure()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        _mockGpioController.Setup(x => x.Write(It.IsAny<int>(), It.IsAny<PinValue>()))
            .Throws(new InvalidOperationException("GPIO write error"));

        // Act
        var result = _roofController.Close();

        // Assert
        result.IsSuccessful.Should().BeFalse();
        result.Error.Should().BeOfType<InvalidOperationException>();
    }

    #endregion

    #region State Management Tests

    [TestMethod]
    [DataRow(RoofControllerStatus.Unknown)]
    [DataRow(RoofControllerStatus.NotInitialized)]
    [DataRow(RoofControllerStatus.Closed)]
    [DataRow(RoofControllerStatus.Closing)]
    [DataRow(RoofControllerStatus.Open)]
    [DataRow(RoofControllerStatus.Opening)]
    [DataRow(RoofControllerStatus.Stopped)]
    [DataRow(RoofControllerStatus.Error)]
    public async Task StatusProperty_ReflectsCurrentState(RoofControllerStatus expectedStatus)
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        
        if (expectedStatus != RoofControllerStatus.NotInitialized)
        {
            await _roofController.Initialize(CancellationToken.None);
        }

        // Act & Assert based on status
        switch (expectedStatus)
        {
            case RoofControllerStatus.NotInitialized:
                _roofController.Status.Should().Be(RoofControllerStatus.NotInitialized);
                break;
                
            case RoofControllerStatus.Stopped:
                _roofController.Stop();
                _roofController.Status.Should().Be(RoofControllerStatus.Stopped);
                break;
                
            case RoofControllerStatus.Opening:
                _roofController.Open();
                _roofController.Status.Should().Be(RoofControllerStatus.Opening);
                break;
                
            case RoofControllerStatus.Closing:
                _roofController.Close();
                _roofController.Status.Should().Be(RoofControllerStatus.Closing);
                break;
                
            default:
                // For other statuses, we can only verify initial state after initialization
                _roofController.Status.Should().Be(RoofControllerStatus.Stopped);
                break;
        }
    }

    [TestMethod]
    public async Task IsInitialized_ReturnsFalseByDefault_TrueAfterInitialization()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);

        // Assert initial state
        _roofController.IsInitialized.Should().BeFalse();

        // Act
        await _roofController.Initialize(CancellationToken.None);

        // Assert after initialization
        _roofController.IsInitialized.Should().BeTrue();
    }

    #endregion

    #region Disposal Tests

    [TestMethod]
    public async Task DisposeAsync_DisposesResourcesProperly()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        // Act
        await _roofController.DisposeAsync();

        // Assert - subsequent operations should fail with ObjectDisposedException
        var stopResult = _roofController.Stop();
        stopResult.IsSuccessful.Should().BeFalse();
        stopResult.Error.Should().BeOfType<ObjectDisposedException>();

        var openResult = _roofController.Open();
        openResult.IsSuccessful.Should().BeFalse();
        openResult.Error.Should().BeOfType<ObjectDisposedException>();

        var closeResult = _roofController.Close();
        closeResult.IsSuccessful.Should().BeFalse();
        closeResult.Error.Should().BeOfType<ObjectDisposedException>();
    }

    [TestMethod]
    public async Task Dispose_DisposesResourcesProperly()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        // Act
        _roofController.Dispose();

        // Assert - subsequent operations should fail with ObjectDisposedException
        var result = _roofController.Stop();
        result.IsSuccessful.Should().BeFalse();
        result.Error.Should().BeOfType<ObjectDisposedException>();
    }

    [TestMethod]
    public async Task MultipleDispose_DoesNotThrow()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        // Act & Assert - should not throw
        _roofController.Dispose();
        _roofController.Dispose();
        await _roofController.DisposeAsync();
    }

    #endregion

    #region Sequence Tests

    [TestMethod]
    public async Task Open_ThenStop_SequenceWorksCorrectly()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        // Act
        var openResult = _roofController.Open();
        var stopResult = _roofController.Stop();

        // Assert
        openResult.IsSuccessful.Should().BeTrue();
        openResult.Value.Should().Be(RoofControllerStatus.Opening);
        
        stopResult.IsSuccessful.Should().BeTrue();
        stopResult.Value.Should().Be(RoofControllerStatus.Stopped);
        
        _roofController.Status.Should().Be(RoofControllerStatus.Stopped);
    }

    [TestMethod]
    public async Task Close_ThenStop_SequenceWorksCorrectly()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        // Act
        var closeResult = _roofController.Close();
        var stopResult = _roofController.Stop();

        // Assert
        closeResult.IsSuccessful.Should().BeTrue();
        closeResult.Value.Should().Be(RoofControllerStatus.Closing);
        
        stopResult.IsSuccessful.Should().BeTrue();
        stopResult.Value.Should().Be(RoofControllerStatus.Stopped);
        
        _roofController.Status.Should().Be(RoofControllerStatus.Stopped);
    }

    [TestMethod]
    public async Task Open_ThenClose_SequenceWorksCorrectly()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        // Act
        var openResult = _roofController.Open();
        var closeResult = _roofController.Close();

        // Assert
        openResult.IsSuccessful.Should().BeTrue();
        openResult.Value.Should().Be(RoofControllerStatus.Opening);
        
        closeResult.IsSuccessful.Should().BeTrue();
        closeResult.Value.Should().Be(RoofControllerStatus.Closing);
        
        _roofController.Status.Should().Be(RoofControllerStatus.Closing);
    }

    [TestMethod]
    public async Task Close_ThenOpen_SequenceWorksCorrectly()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        // Act
        var closeResult = _roofController.Close();
        var openResult = _roofController.Open();

        // Assert
        closeResult.IsSuccessful.Should().BeTrue();
        closeResult.Value.Should().Be(RoofControllerStatus.Closing);
        
        openResult.IsSuccessful.Should().BeTrue();
        openResult.Value.Should().Be(RoofControllerStatus.Opening);
        
        _roofController.Status.Should().Be(RoofControllerStatus.Opening);
    }

    #endregion

    #region Concurrent Access Tests

    [TestMethod]
    public async Task ConcurrentOperations_ThreadSafe()
    {
        // Arrange
        _roofController = new RoofController(_mockLogger.Object, _options, _mockGpioController.Object);
        await _roofController.Initialize(CancellationToken.None);

        // Act - simulate concurrent operations
        var tasks = new List<Task<Result<RoofControllerStatus>>>
        {
            Task.Run(() => _roofController.Open()),
            Task.Run(() => _roofController.Close()),
            Task.Run(() => _roofController.Stop()),
            Task.Run(() => _roofController.Open()),
            Task.Run(() => _roofController.Stop())
        };

        var results = await Task.WhenAll(tasks);

        // Assert - all operations should complete successfully (thread safety)
        results.Should().AllSatisfy(result => result.IsSuccessful.Should().BeTrue());
        
        // Final state should be one of the valid states
        _roofController.Status.Should().BeOneOf(
            RoofControllerStatus.Opening,
            RoofControllerStatus.Closing,
            RoofControllerStatus.Stopped
        );
    }

    #endregion

    public void Dispose()
    {
        _roofController?.Dispose();
    }
}
