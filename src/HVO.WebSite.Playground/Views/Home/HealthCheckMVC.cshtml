@{
    ViewData["Title"] = "Health Check MVC Test";
}

<div class="container mt-4">
    <h1>üè• Health Check API Test (MVC)</h1>
    <p class="lead">Test the health check endpoint using traditional MVC with JavaScript.</p>
    
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">API Endpoint Test</h5>
                    <p class="card-text">
                        Click the button below to call the <code>/health</code> endpoint and see the response.
                    </p>
                    
                    <button id="testApiBtn" class="btn btn-primary btn-lg">
                        <span id="btnIcon">üß™</span>
                        <span id="btnText">Test Health Check API</span>
                    </button>
                    
                    <button id="clearBtn" class="btn btn-secondary ms-2" style="display: none;">
                        Clear Result
                    </button>
                </div>
            </div>
            
            <!-- Success Result -->
            <div id="successResult" class="card mt-4 border-success" style="display: none;">
                <div class="card-header bg-success text-white">
                    <h5 class="mb-0">‚úÖ Health Check Response</h5>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-3">Overall Status:</dt>
                        <dd class="col-sm-9" id="statusInfo"></dd>
                        
                        <dt class="col-sm-3">Total Duration:</dt>
                        <dd class="col-sm-9" id="durationInfo"></dd>
                    </dl>
                    
                    <h6 class="mt-3">Individual Health Checks:</h6>
                    <div id="checksInfo" class="mt-2"></div>
                </div>
                <div class="card-footer">
                    <h6>Raw JSON Response:</h6>
                    <pre class="bg-light p-3 border rounded"><code id="rawJsonResponse"></code></pre>
                </div>
            </div>
            
            <!-- Error Result -->
            <div id="errorResult" class="card mt-4 border-danger" style="display: none;">
                <div class="card-header bg-danger text-white">
                    <h5 class="mb-0">‚ùå Error</h5>
                </div>
                <div class="card-body">
                    <p class="card-text">
                        <strong>Error:</strong> <span id="errorMessage"></span>
                    </p>
                    <p class="card-text" id="errorStatus" style="display: none;">
                        <strong>Status:</strong> <span id="errorStatusText"></span>
                    </p>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">About This Test (MVC)</h5>
                    <p class="card-text">
                        This page demonstrates:
                    </p>
                    <ul class="list-unstyled">
                        <li>‚úÖ Traditional MVC views</li>
                        <li>‚úÖ JavaScript/Fetch API</li>
                        <li>‚úÖ DOM manipulation</li>
                        <li>‚úÖ Error handling</li>
                        <li>‚úÖ Bootstrap 5 styling</li>
                        <li>‚úÖ Real-time UI updates</li>
                    </ul>
                    
                    <hr>
                    
                    <h6>Compare with Blazor</h6>
                    <p class="small text-muted">
                        Try the <a href="/health-check-blazor">Blazor version</a> to see the difference
                        between client-side JavaScript and server-side C# approaches.
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let isLoading = false;

            const testApiBtn = document.getElementById('testApiBtn');
            const clearBtn = document.getElementById('clearBtn');

            testApiBtn.addEventListener('click', function() {
                if (isLoading) return;
                callHealthCheckApi();
            });

            clearBtn.addEventListener('click', function() {
                clearResults();
            });

            function callHealthCheckApi() {
                // Set loading state
                isLoading = true;
                updateButtonState(true);
                clearResults();

                // Make API call using fetch
                fetch('/health', {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    return response.json().then(data => ({ data, status: response.status, statusText: response.statusText }));
                })
                .then(result => {
                    console.log('API call successful:', result.data);
                    displaySuccessResult(result.data, result.status, result.statusText);
                })
                .catch(error => {
                    console.error('API call failed:', error);
                    displayErrorResult(error);
                })
                .finally(() => {
                    // Reset loading state
                    isLoading = false;
                    updateButtonState(false);
                });
            }

            function updateButtonState(loading) {
                const icon = document.getElementById('btnIcon');
                const text = document.getElementById('btnText');

                if (loading) {
                    testApiBtn.disabled = true;
                    icon.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';
                    text.textContent = 'Testing...';
                } else {
                    testApiBtn.disabled = false;
                    icon.textContent = 'üß™';
                    text.textContent = 'Test Health Check API';
                }
            }

            function displaySuccessResult(data, statusCode, statusText) {
                // Populate result fields
                document.getElementById('statusInfo').textContent = data.status || 'Unknown';
                document.getElementById('durationInfo').textContent = data.duration || 'N/A';
                
                // Display individual health checks
                const checksContainer = document.getElementById('checksInfo');
                checksContainer.innerHTML = '';
                
                if (data.checks && Array.isArray(data.checks)) {
                    data.checks.forEach(check => {
                        const checkDiv = document.createElement('div');
                        checkDiv.className = 'alert alert-sm mb-2 ' + (check.status === 'Healthy' ? 'alert-success' : 'alert-warning');
                        checkDiv.innerHTML = `
                            <strong>${check.name}:</strong> ${check.status} 
                            <small class="text-muted">(${check.duration})</small>
                            ${check.exception ? `<br><small class="text-danger">${check.exception}</small>` : ''}
                        `;
                        checksContainer.appendChild(checkDiv);
                    });
                } else {
                    checksContainer.innerHTML = '<div class="alert alert-info alert-sm">No individual check details available</div>';
                }

                document.getElementById('rawJsonResponse').textContent = JSON.stringify(data, null, 2);

                // Show success result
                document.getElementById('successResult').style.display = 'block';
                clearBtn.style.display = 'inline-block';
            }

            function displayErrorResult(error) {
                let errorMessage = 'Unknown error occurred';
                
                if (error.message) {
                    errorMessage = error.message;
                } else if (error.name === 'TypeError') {
                    errorMessage = 'Network error - Unable to connect to server';
                }

                document.getElementById('errorMessage').textContent = errorMessage;
                
                // Show error result
                document.getElementById('errorResult').style.display = 'block';
                clearBtn.style.display = 'inline-block';
            }

            function clearResults() {
                document.getElementById('successResult').style.display = 'none';
                document.getElementById('errorResult').style.display = 'none';
                clearBtn.style.display = 'none';
            }

            function formatTimestamp(timestamp) {
                if (!timestamp) return 'N/A';
                
                try {
                    const date = new Date(timestamp);
                    return date.toISOString().replace('T', ' ').replace('Z', ' UTC');
                } catch (e) {
                    return timestamp;
                }
            }
        });
    </script>
}
