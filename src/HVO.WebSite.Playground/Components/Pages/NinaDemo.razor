@page "/nina-demo"
@rendermode InteractiveServer
@using HVO.NinaClient.Models

<PageTitle>NINA API Demo</PageTitle>

<div class="nina-demo-container">
    <h1>NINA API Demonstration</h1>
    <p class="lead">Connect to NINA astronomy software to retrieve system information and capture images.</p>

    @if (!_ninaAvailable)
    {
        <div class="alert alert-warning nina-demo-error" role="alert">
            <h5 class="alert-heading">
                <i class="fas fa-exclamation-triangle me-2"></i>
                NINA Not Available
            </h5>
            <p class="mb-2">
                The NINA astronomy software is not currently accessible. This could be due to:
            </p>
            <ul class="mb-2">
                <li>NINA application is not running</li>
                <li>Advanced API plugin is not installed or enabled</li>
                <li>Network connectivity issues (configured IP: 192.168.0.102:1888)</li>
                <li>Firewall blocking the connection</li>
            </ul>
            <hr>
            <p class="mb-0">
                <strong>To fix this:</strong>
                <br>1. Start NINA astronomy software
                <br>2. Enable the Advanced API plugin in NINA settings
                <br>3. Verify the API server is running on port 1888
                <br>4. Click "Refresh Data" to retry the connection
            </p>
        </div>
    }

    <div class="nina-demo-actions">
        <button class="btn btn-primary" @onclick="LoadDataButtonAsync" disabled="@_isLoading">
            @if (_isLoading)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                <span>Loading...</span>
            }
            else
            {
                <i class="fas fa-sync-alt me-2"></i>
                <span>Refresh Data</span>
            }
        </button>

        <button class="btn btn-secondary ms-2" @onclick="GetScreenshotAsync" disabled="@(_isScreenshotLoading || !_ninaAvailable)">
            @if (_isScreenshotLoading)
            {
                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                <span>Loading...</span>
            }
            else
            {
                <i class="fas fa-camera me-2"></i>
                <span>Get Screenshot</span>
            }
        </button>

        <div class="ms-3 d-inline-flex align-items-center">
            <span class="me-2">WebSocket:</span>
            @if (_webSocketStatus == "Connected")
            {
                <span class="badge bg-success">
                    <i class="fas fa-wifi me-1"></i>@_webSocketStatus
                </span>
            }
            else if (_webSocketStatus == "Connecting...")
            {
                <span class="badge bg-warning">
                    <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>@_webSocketStatus
                </span>
            }
            else
            {
                <span class="badge bg-secondary">
                    <i class="fas fa-wifi-slash me-1"></i>@_webSocketStatus
                </span>
            }
        </div>

        @if (_ninaAvailable)
        {
            <div class="ms-3 d-inline-flex align-items-center">
                <span class="me-2">NINA Status:</span>
                <span class="badge bg-success">
                    <i class="fas fa-check me-1"></i>Available
                </span>
            </div>
        }
        else
        {
            <div class="ms-3 d-inline-flex align-items-center">
                <span class="me-2">NINA Status:</span>
                <span class="badge bg-danger">
                    <i class="fas fa-times me-1"></i>Offline
                </span>
            </div>
        }
    </div>

    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger nina-demo-error" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            <strong>Error:</strong> @_errorMessage
        </div>
    }

    @if (!string.IsNullOrEmpty(_versionInfo))
    {
        <div class="nina-demo-section">
            <h2><i class="fas fa-info-circle me-2"></i>NINA Version Information</h2>
            <div class="nina-demo-card">
                <dl class="row">
                    <dt class="col-sm-3">Application Version:</dt>
                    <dd class="col-sm-9"><code>@_versionInfo</code></dd>
                </dl>
            </div>
        </div>
    }

    @if (_cameraInfo != null)
    {
        <div class="nina-demo-section">
            <h2>
                <i class="fas fa-camera me-2"></i>
                Camera Information & Image Capture
                @if (_cameraInfo.Connected && _isWebSocketConnected)
                {
                    <span class="badge bg-success ms-2">
                        <i class="fas fa-broadcast-tower me-1"></i>Live
                    </span>
                }
            </h2>
            <div class="nina-demo-card">
                <div class="row">
                    <div class="col-md-6">
                        <h5><i class="fas fa-info-circle me-2"></i>Camera Status</h5>
                        <dl class="row">
                            <dt class="col-sm-4">Name:</dt>
                            <dd class="col-sm-8">@(_cameraInfo.Name ?? "Not specified")</dd>
                            
                            <dt class="col-sm-4">Connected:</dt>
                            <dd class="col-sm-8">
                                @if (_cameraInfo.Connected)
                                {
                                    <span class="badge bg-success"><i class="fas fa-check me-1"></i>Connected</span>
                                    <button class="btn btn-sm btn-outline-danger ms-2" @onclick="DisconnectCameraAsync" disabled="@(!_ninaAvailable)">
                                        <i class="fas fa-unlink me-1"></i>Disconnect
                                    </button>
                                }
                                else
                                {
                                    <span class="badge bg-danger"><i class="fas fa-times me-1"></i>Disconnected</span>
                                    <button class="btn btn-sm btn-outline-success ms-2" @onclick="ConnectCameraAsync" disabled="@(!_ninaAvailable)">
                                        <i class="fas fa-link me-1"></i>Connect
                                    </button>
                                }
                            </dd>
                            
                            @if (_cameraInfo.Connected)
                            {
                                <dt class="col-sm-4">Temperature:</dt>
                                <dd class="col-sm-8">
                                    @_cameraInfo.Temperature.ToString("F1")°C
                                    @if (_cameraInfo.CoolerOn)
                                    {
                                        <span class="badge bg-info ms-1">
                                            <i class="fas fa-snowflake me-1"></i>Cooled
                                        </span>
                                    }
                                </dd>
                                
                                <dt class="col-sm-4">Pixel Size:</dt>
                                <dd class="col-sm-8">@_cameraInfo.PixelSize.ToString("F1") μm</dd>
                                
                                <dt class="col-sm-4">Resolution:</dt>
                                <dd class="col-sm-8">@_cameraInfo.XSize × @_cameraInfo.YSize pixels</dd>
                                
                                <dt class="col-sm-4">Binning:</dt>
                                <dd class="col-sm-8">@_cameraInfo.BinX × @_cameraInfo.BinY</dd>
                            }
                        </dl>
                    </div>
                    
                    <div class="col-md-6">
                        <h5><i class="fas fa-camera-retro me-2"></i>Image Capture</h5>
                        
                        @if (!_cameraInfo.Connected || !_ninaAvailable)
                        {
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                @if (!_ninaAvailable)
                                {
                                    <span>NINA must be available and camera connected to capture images.</span>
                                }
                                else
                                {
                                    <span>Camera must be connected to capture images.</span>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="capture-controls">
                                <div class="row g-3 mb-3">
                                    <div class="col-md-6">
                                        <label for="exposureTime" class="form-label">
                                            <i class="fas fa-clock me-1"></i>Exposure (seconds)
                                        </label>
                                        <input type="number" id="exposureTime" class="form-control" 
                                               @bind="_exposureTime"
                                               min="0.001" max="3600" step="0.1" disabled="@(_isCapturing || !_ninaAvailable)" />
                                    </div>
                                    
                                    <div class="col-md-6">
                                        <label for="filterSelect" class="form-label">
                                            <i class="fas fa-filter me-1"></i>Filter
                                        </label>
                                        <select id="filterSelect" class="form-select" 
                                                @bind="_selectedFilter"
                                                disabled="@(_isCapturing || !_isFilterWheelConnected || !_ninaAvailable)">
                                            <option value="">No Filter</option>
                                            @foreach (var filter in _availableFilters)
                                            {
                                                <option value="@filter.Name">@filter.Name</option>
                                            }
                                        </select>
                                    </div>
                                </div>
                                
                                <div class="d-grid">
                                    <button class="btn btn-success" @onclick="CaptureImageAsync" disabled="@(_isCapturing || !_ninaAvailable)">
                                        @if (_isCapturing)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                            <span>Capturing (@_exposureTime.ToString("F1")s)...</span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-camera me-2"></i>
                                            <span>Capture Image</span>
                                        }
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Captured Image Display - Right under the capture button -->
                @if (!string.IsNullOrEmpty(_capturedImageData))
                {
                    <div class="mt-3">
                        <h5><i class="fas fa-image me-2"></i>Captured Image</h5>
                        <div class="captured-image-container">
                            <img src="data:image/png;base64,@_capturedImageData" 
                                 alt="Captured Image from Camera" 
                                 class="captured-image img-fluid rounded border" 
                                 style="max-width: 100%; height: auto; cursor: pointer;"
                                 @onclick="() => OpenCapturedImageModal()" />
                            <div class="captured-image-info mt-2">
                                <div class="row">
                                    <div class="col-md-6">
                                        <small class="text-muted">
                                            <i class="fas fa-info-circle me-1"></i>
                                            Size: @((Convert.FromBase64String(_capturedImageData).Length / 1024.0).ToString("F1")) KB
                                        </small>
                                    </div>
                                    <div class="col-md-6 text-end">
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => OpenCapturedImageModal()">
                                            <i class="fas fa-expand me-1"></i>View Full Size
                                        </button>
                                        <button class="btn btn-sm btn-outline-secondary ms-1" @onclick="() => DownloadCapturedImage()">
                                            <i class="fas fa-download me-1"></i>Download
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }

    @if (_lastImageStatistics != null)
    {
        <div class="nina-demo-section">
            <h2><i class="fas fa-chart-bar me-2"></i>Last Image Statistics</h2>
            <div class="nina-demo-card">
                <div class="row">
                    <div class="col-md-6">
                        <dl class="row">
                            <dt class="col-sm-4">Stars Detected:</dt>
                            <dd class="col-sm-8">
                                <span class="badge bg-primary">@_lastImageStatistics.Stars</span>
                            </dd>
                            
                            <dt class="col-sm-4">HFR:</dt>
                            <dd class="col-sm-8">
                                <code>@_lastImageStatistics.HFR.ToString("F2")</code> pixels
                            </dd>
                            
                            <dt class="col-sm-4">Mean ADU:</dt>
                            <dd class="col-sm-8">
                                <code>@_lastImageStatistics.Mean.ToString("F2")</code>
                            </dd>
                        </dl>
                    </div>
                    
                    <div class="col-md-6">
                        <dl class="row">
                            <dt class="col-sm-4">Standard Deviation:</dt>
                            <dd class="col-sm-8">
                                <code>@_lastImageStatistics.StDev.ToString("F2")</code>
                            </dd>
                            
                            <dt class="col-sm-4">Min/Max ADU:</dt>
                            <dd class="col-sm-8">
                                <code>@_lastImageStatistics.Min</code> / <code>@_lastImageStatistics.Max</code>
                            </dd>
                            
                            <dt class="col-sm-4">Image Quality:</dt>
                            <dd class="col-sm-8">
                                @if (_lastImageStatistics.HFR <= 2.0)
                                {
                                    <span class="badge bg-success"><i class="fas fa-check me-1"></i>Excellent</span>
                                }
                                else if (_lastImageStatistics.HFR <= 3.0)
                                {
                                    <span class="badge bg-info"><i class="fas fa-thumbs-up me-1"></i>Good</span>
                                }
                                else if (_lastImageStatistics.HFR <= 4.0)
                                {
                                    <span class="badge bg-warning"><i class="fas fa-exclamation me-1"></i>Fair</span>
                                }
                                else
                                {
                                    <span class="badge bg-danger"><i class="fas fa-times me-1"></i>Poor</span>
                                }
                            </dd>
                        </dl>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (_mountInfo != null)
    {
        <div class="nina-demo-section">
            <h2>
                <i class="fas fa-compass me-2"></i>
                Mount Information
                @if (_mountInfo.Connected && _isWebSocketConnected)
                {
                    <span class="badge bg-success ms-2">
                        <i class="fas fa-broadcast-tower me-1"></i>Live
                    </span>
                }
            </h2>
            <div class="nina-demo-card">
                <dl class="row">
                    <dt class="col-sm-3">Name:</dt>
                    <dd class="col-sm-9">@(_mountInfo.Name ?? "Not specified")</dd>
                    
                    <dt class="col-sm-3">Connected:</dt>
                    <dd class="col-sm-9">
                        @if (_mountInfo.Connected)
                        {
                            <span class="badge bg-success"><i class="fas fa-check me-1"></i>Connected</span>
                        }
                        else
                        {
                            <span class="badge bg-danger"><i class="fas fa-times me-1"></i>Disconnected</span>
                        }
                    </dd>
                    
                    @if (_mountInfo.Connected)
                    {
                        <dt class="col-sm-3">Current Position:</dt>
                        <dd class="col-sm-9">
                            <div class="telescope-coordinates">
                                <div><strong>RA:</strong> @_mountInfo.RightAscension.ToString("F6")°</div>
                                <div><strong>Dec:</strong> @_mountInfo.Declination.ToString("F6")°</div>
                                <div><strong>Alt:</strong> @_mountInfo.Altitude.ToString("F6")°</div>
                                <div><strong>Az:</strong> @_mountInfo.Azimuth.ToString("F6")°</div>
                            </div>
                        </dd>
                        
                        <dt class="col-sm-3">Tracking:</dt>
                        <dd class="col-sm-9">
                            @if (_mountInfo.TrackingEnabled)
                            {
                                <span class="badge bg-success"><i class="fas fa-play me-1"></i>Tracking</span>
                            }
                            else
                            {
                                <span class="badge bg-warning"><i class="fas fa-pause me-1"></i>Not Tracking</span>
                            }
                        </dd>
                    }
                </dl>
            </div>
        </div>
    }

    @if (_lastUpdated.HasValue)
    {
        <div class="nina-demo-footer">
            <small class="text-muted">
                <i class="fas fa-clock me-1"></i>
                Last updated: @_lastUpdated.Value.ToString("yyyy-MM-dd HH:mm:ss")
                @if (_isWebSocketConnected && (_mountInfo?.Connected == true || _cameraInfo?.Connected == true))
                {
                    <span class="ms-2 text-success">
                        <i class="fas fa-circle" style="font-size: 0.5em;"></i>
                        Real-time updates active
                    </span>
                }
            </small>
        </div>
    }

    <!-- API Compliance Information -->
    <div class="nina-demo-section">
        <h2><i class="fas fa-code me-2"></i>API Implementation Status</h2>
        <div class="nina-demo-card">
            <div class="alert alert-success">
                <h5 class="alert-heading">
                    <i class="fas fa-check-circle me-2"></i>
                    Complete OpenAPI Specification Compliance Achieved
                </h5>
                <p class="mb-2">
                    This demo uses the fully corrected NinaApiClient with <strong>100% OpenAPI v2.2.6 compliance</strong>:
                </p>
                <ul class="mb-2">
                    <li><strong>60+ method implementations corrected</strong> across 11 equipment categories</li>
                    <li><strong>Correct HTTP methods</strong> (many operations use GET with query parameters, not POST)</li>
                    <li><strong>Enhanced device selection</strong> with optional deviceId parameters for connections</li>
                    <li><strong>Advanced capture options</strong> including platesolving, gain control, and image streaming</li>
                    <li><strong>Position-based filter control</strong> (OpenAPI compliant) instead of name-based</li>
                    <li><strong>Enhanced mount operations</strong> with slew options (Center, Rotate)</li>
                    <li><strong>Improved error handling</strong> with graceful fallback for offline NINA instances</li>
                </ul>
                <p class="mb-0">
                    <small class="text-muted">
                        <i class="fas fa-info-circle me-1"></i>
                        This version includes enhanced error handling and graceful degradation when NINA is not available.
                    </small>
                </p>
            </div>
        </div>
    </div>

    <!-- NINA Screenshot Display - Back at the bottom -->
    @if (_screenshotData != null)
    {
        <div class="nina-demo-section">
            <h2><i class="fas fa-desktop me-2"></i>NINA Application Screenshot</h2>
            <div class="nina-demo-card">
                <div class="screenshot-container">
                    <img src="data:image/png;base64,@Convert.ToBase64String(_screenshotData)" 
                         alt="NINA Application Screenshot" 
                         class="nina-screenshot img-fluid rounded border" 
                         style="max-width: 100%; height: auto; cursor: pointer;"
                         @onclick="() => OpenScreenshotModal()" />
                    <div class="screenshot-info mt-2">
                        <div class="row">
                            <div class="col-md-6">
                                <small class="text-muted">
                                    <i class="fas fa-info-circle me-1"></i>
                                    Size: @((_screenshotData.Length / 1024.0).ToString("F1")) KB
                                </small>
                            </div>
                            <div class="col-md-6 text-end">
                                <button class="btn btn-sm btn-outline-primary" @onclick="() => OpenScreenshotModal()">
                                    <i class="fas fa-expand me-1"></i>View Full Size
                                </button>
                                <button class="btn btn-sm btn-outline-secondary ms-1" @onclick="() => DownloadScreenshot()">
                                    <i class="fas fa-download me-1"></i>Download
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>
