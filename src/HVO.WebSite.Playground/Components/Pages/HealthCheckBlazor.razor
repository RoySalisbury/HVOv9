@page "/health-check-blazor"
@using System.Net.Http
@using System.Text.Json
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<HealthCheckBlazor> Logger
@rendermode InteractiveServer

<PageTitle>Health Check Blazor Test</PageTitle>

<div class="container mt-4">
    <h1>üè• Health Check API Test (Blazor)</h1>
    <p class="lead">Test the health check endpoint using Blazor Server with C# code-behind.</p>
    
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">API Endpoint Test</h5>
                    <p class="card-text">
                        Click the button below to call the <code>/health</code> endpoint and see the response.
                    </p>
                    
                    <button class="btn btn-primary btn-lg" @onclick="CallHealthCheckApi" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            <span>Testing...</span>
                        }
                        else
                        {
                            <span>üè• Test Health Check API</span>
                        }
                    </button>
                    
                    @if (showResult || showError)
                    {
                        <button class="btn btn-secondary ms-2" @onclick="ClearResult">Clear Result</button>
                    }
                </div>
            </div>
            
            @if (showResult && apiResponse != null)
            {
                <div class="card mt-4 border-success">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">‚úÖ Health Check Response</h5>
                    </div>
                    <div class="card-body">
                        <dl class="row">
                            <dt class="col-sm-3">Overall Status:</dt>
                            <dd class="col-sm-9">@apiResponse.Status</dd>
                            
                            <dt class="col-sm-3">Total Duration:</dt>
                            <dd class="col-sm-9">@apiResponse.Duration</dd>
                        </dl>
                        
                        <h6 class="mt-3">Individual Health Checks:</h6>
                        @if (apiResponse.Checks != null && apiResponse.Checks.Any())
                        {
                            @foreach (var check in apiResponse.Checks)
                            {
                                <div class="alert @(check.Status == "Healthy" ? "alert-success" : "alert-warning") alert-sm mb-2">
                                    <strong>@check.Name:</strong> @check.Status 
                                    <small class="text-muted">(@check.Duration)</small>
                                    @if (!string.IsNullOrEmpty(check.Exception))
                                    {
                                        <br><small class="text-danger">@check.Exception</small>
                                    }
                                </div>
                            }
                        }
                        else
                        {
                            <div class="alert alert-info alert-sm">No individual check details available</div>
                        }
                    </div>
                    <div class="card-footer">
                        <h6>Raw JSON Response:</h6>
                        <pre class="bg-light p-3 border rounded"><code>@rawJsonResponse</code></pre>
                    </div>
                </div>
            }
            
            @if (showError && !string.IsNullOrEmpty(errorMessage))
            {
                <div class="card mt-4 border-danger">
                    <div class="card-header bg-danger text-white">
                        <h5 class="mb-0">‚ùå Error</h5>
                    </div>
                    <div class="card-body">
                        <p class="card-text">
                            <strong>Error:</strong> @errorMessage
                        </p>
                        @if (statusCode > 0)
                        {
                            <p class="card-text">
                                <strong>Status:</strong> @statusCode @statusText
                            </p>
                        }
                    </div>
                </div>
            }
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">About This Test</h5>
                    <p class="card-text">
                        This page demonstrates:
                    </p>
                    <ul class="list-unstyled">
                        <li>‚úÖ Blazor Server Components</li>
                        <li>‚úÖ C# Code-Behind Logic</li>
                        <li>‚úÖ HttpClientFactory Pattern</li>
                        <li>‚úÖ JSON Deserialization</li>
                        <li>‚úÖ Interactive UI Updates</li>
                        <li>‚úÖ Exception Handling</li>
                        <li>‚úÖ Health Check API Integration</li>
                    </ul>
                    
                    <h6 class="mt-3">Key Features:</h6>
                    <ul class="list-unstyled">
                        <li>üîÑ Real-time status updates</li>
                        <li>‚ö° Server-side rendering</li>
                        <li>üé® Bootstrap styling</li>
                        <li>üìä Detailed health metrics</li>
                        <li>üêõ Comprehensive error handling</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isLoading = false;
    private bool showResult = false;
    private bool showError = false;
    private string errorMessage = string.Empty;
    private string rawJsonResponse = string.Empty;
    private int statusCode = 0;
    private string statusText = string.Empty;
    private HealthCheckResponse? apiResponse = null;

    protected override async Task OnInitializedAsync()
    {
        // Component initialization
        await base.OnInitializedAsync();
    }

    private async Task CallHealthCheckApi()
    {
        // Reset state
        isLoading = true;
        showResult = false;
        showError = false;
        errorMessage = string.Empty;
        rawJsonResponse = string.Empty;
        apiResponse = null;
        statusCode = 0;
        statusText = string.Empty;
        
        Logger.LogInformation("CallHealthCheckApi method called - starting health check");
        
        // Update UI
        StateHasChanged();

        try
        {
            // Create HttpClient from factory - use the configured LocalApi client
            var httpClient = HttpClientFactory.CreateClient("LocalApi");
            
            Logger.LogInformation("Calling health check endpoint using LocalApi client");
            
            // Call the API using relative path since LocalApi has base address set
            var response = await httpClient.GetAsync("health");
            statusCode = (int)response.StatusCode;
            statusText = response.ReasonPhrase ?? string.Empty;

            Logger.LogInformation("Health check response: {StatusCode} {StatusText}", statusCode, statusText);

            if (response.IsSuccessStatusCode)
            {
                // Read and parse the response
                var jsonContent = await response.Content.ReadAsStringAsync();
                Logger.LogInformation("Raw JSON response: {JsonContent}", jsonContent);
                
                rawJsonResponse = FormatJson(jsonContent);
                
                var options = new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                };
                
                try 
                {
                    apiResponse = JsonSerializer.Deserialize<HealthCheckResponse>(jsonContent, options);
                    Logger.LogInformation("Deserialized response successfully");
                    
                    if (apiResponse != null)
                    {
                        Logger.LogInformation("Response data: Status={Status}, ChecksCount={ChecksCount}", 
                            apiResponse.Status, apiResponse.Checks?.Count ?? 0);
                    }
                    else
                    {
                        Logger.LogWarning("Deserialized response is null");
                    }
                }
                catch (JsonException jsonEx)
                {
                    Logger.LogError(jsonEx, "Failed to deserialize JSON response: {JsonContent}", jsonContent);
                    errorMessage = $"JSON parsing error: {jsonEx.Message}";
                    showError = true;
                    return;
                }
                
                showResult = true;
                
                Logger.LogInformation("Successfully called Health Check API");
            }
            else
            {
                errorMessage = $"HTTP {statusCode}: {statusText}";
                showError = true;
                Logger.LogWarning("Health Check API call failed with status {StatusCode}", statusCode);
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Network error: {ex.Message}";
            showError = true;
            Logger.LogError(ex, "Network error calling Health Check API");
        }
        catch (JsonException ex)
        {
            errorMessage = $"JSON parsing error: {ex.Message}";
            showError = true;
            Logger.LogError(ex, "JSON parsing error");
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
            showError = true;
            Logger.LogError(ex, "Unexpected error calling Health Check API");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void ClearResult()
    {
        showResult = false;
        showError = false;
        errorMessage = string.Empty;
        rawJsonResponse = string.Empty;
        apiResponse = null;
        statusCode = 0;
        statusText = string.Empty;
        StateHasChanged();
    }

    private string FormatJson(string json)
    {
        try
        {
            var jsonDoc = JsonDocument.Parse(json);
            return JsonSerializer.Serialize(jsonDoc, new JsonSerializerOptions { WriteIndented = true });
        }
        catch
        {
            return json;
        }
    }

    // Response model matching the health check API
    public class HealthCheckResponse
    {
        public string Status { get; set; } = string.Empty;
        public List<HealthCheckResult> Checks { get; set; } = new();
        public string Duration { get; set; } = string.Empty;
    }

    public class HealthCheckResult
    {
        public string Name { get; set; } = string.Empty;
        public string Status { get; set; } = string.Empty;
        public string? Exception { get; set; }
        public string Duration { get; set; } = string.Empty;
    }
}